// Generated by GenerateDefaultShellCommandConfig
// Run: `swift run GenerateDefaultShellCommandConfig`

import Foundation

public enum DefaultShellCommandConfig {
    public static let config: ShellCommandConfig = shellCommands {
        command("ListFiles")
            .describing("Recursively list a directory")
            .executable("/bin/ls")
            .argRow("{(path)}")
            .require("path", .string(description: "Directory path to list"))
            .paramsDescription("Parameters for ls command")

        command("ShowFileTree")
            .describing("Visual directory tree listing")
            .executable("tree")
            .truncated()
            .argRow("{(path)}")
            .require("path", .string(description: "Directory path to list"))
            .paramsDescription("Parameters for tree command")

        command("FindFiles")
            .describing("Locate files matching a pattern using fd")
            .executable("fd")
            .argRow("{{pattern}}", "{(path)}")
            .require("path", .string(description: "Root path to search in"))
            .require("pattern", .string(description: "Search pattern (regex-like)"))
            .paramsDescription("Parameters for fd command")

        command("RipGrepIncludHidden")
            .describing("Search file contents for a regex pattern including in hidden folders.  Use this only as required since it is slower than RipGrep that ignores hidden files.")
            .executable("rg")
            .optedIn()
            .argRow("--hidden", "--glob", "'!.git'", "-R", "-n", "{{pattern}}", "{(path)}")
            .require("pattern", .string(description: "Pattern to search for"))
            .require("path", .string(description: "Root path to search in"))
            .paramsDescription("Parameters for grep command")

        command("RipGrep")
            .describing("Search file contents for a regex pattern")
            .executable("rg")
            .argRow("-n", "{{pattern}}", "{(path)}")
            .require("pattern", .string(description: "Regex pattern to search for"))
            .require("path", .string(description: "Path to search in"))
            .paramsDescription("Parameters for ripgrep command")

        command("RipGrepWithGlob")
            .describing("Search file contents for a regex pattern only in files matching given glob, using ripgrep.")
            .executable("rg")
            .argRow("-n", "{{pattern}}", "--glob", "{{glob}}", "{(path)}")
            .require("pattern", .string(description: "Regex pattern to search for"))
            .require("path", .string(description: "Path to search in"))
            .require("glob", .string(description: "Glob pattern for file filtering (ripgrep --glob argument, including any ! if excluding). User specifies complete glob pattern."))
            .paramsDescription("Parameters for ripgrep command with --glob support. glob should be formatted for ripgrep, with ! as needed.")

        command("SearchAndReplace")
            .describing("Perform stream editing on a file")
            .executable("sed")
            .argRow("-i", "")
            .argRow("s/{{search}}/{{replace}}/g")
            .argRow("{(file)}")
            .require("file", .string(description: "File to edit in place"))
            .require("search", .string(description: "Search regex"))
            .require("replace", .string(description: "Replacement string"))
            .paramsDescription("Parameters for sed command")

        command("TouchFile")
            .describing("Create an empty file or update its timestamp")
            .executable("touch")
            .argRow("{(file)}")
            .require("file", .string(description: "Path of the file to create or update"))
            .paramsDescription("Parameters for touch command")

        command("MakeDirectory")
            .describing("Create directories")
            .executable("mkdir")
            .argRow("-p", "{(dir)}")
            .require("dir", .string(description: "Directory path to create"))
            .paramsDescription("Parameters for mkdir command")

        command("RemoveFiles")
            .describing("Remove files or directories")
            .executable("rm")
            .argRow("-f", "-r", "{(target)}")
            .require("target", .string(description: "File or directory to remove"))
            .paramsDescription("Parameters for rm command")

        command("MoveFiles")
            .describing("Move or rename files or directories")
            .executable("mv")
            .argRow("{(source)}", "{(destination)}")
            .require("source", .string(description: "Source path"))
            .require("destination", .string(description: "Destination path"))
            .paramsDescription("Parameters for mv command")

        command("CopyFiles")
            .describing("Copy files or directories")
            .executable("cp")
            .argRow("-r", "-p", "{(source)}", "{(destination)}")
            .require("destination", .string(description: "Destination path"))
            .require("source", .string(description: "Source path"))
            .paramsDescription("Parameters for cp command")

        command("WriteToFile")
            .describing("Create or overwrite a file with specified content via heredoc")
            .executable("bash")
            .argRow("-c", "cat << 'EOF' > {(file)}\n{{content}}\nEOF")
            .require("file", .string(description: "File path to write content to"))
            .require("content", .string(description: "Content to write to the file"))
            .paramsDescription("Parameters for here_document command")

        command("ShowFileContents")
            .describing("Display file contents from a specified starting line, limited by line count")
            .executable("sed")
            .exclusiveArgs()
            .argRow("-n", "$(({{startLine}}+1)),$(({{startLine}}+{{lineCount}}))p", "{(file)}")
            .argRow("-e", "", "{(file)}")
            .require("file", .string(description: "File path to read"))
            .optional("startLine", .integer(description: "Line number to start reading from (0-based)"))
            .optional("lineCount", .integer(description: "Maximum number of lines to read"))
            .paramsDescription("Parameters for sed command, optionally limited by start line and line count")

        command("LineCount")
            .describing("Check the total number of lines in a file")
            .executable("wc")
            .argRow("-l", "{(file)}")
            .require("file", .string(description: "File path to check line count for"))
            .paramsDescription("Parameters for wc command")

        command("BuildSwift")
            .describing("Build a Swift project using swift build")
            .executable("swift")
            .echoed()
            .truncated()
            .argRow("build", "--package-path", "{(packagePath)}")
            .require("packagePath", .string(description: "Path to the Swift package"))
            .paramsDescription("Parameters for swift build command")

        command("TestSwift")
            .describing("Run tests in a Swift package using swift test")
            .executable("swift")
            .echoed()
            .truncated()
            .argRow("test", "--package-path", "{(packagePath)}")
            .require("packagePath", .string(description: "Path to the Swift package"))
            .paramsDescription("Parameters for swift test command")

        command("FixSwift")
            .describing("Attempt to fix any build or test issues in a Swift package")
            .executable("promptly")
            .echoed()
            .truncated()
            .optedIn()
            .argRow("--canned", "build-swift", "--message", "user:Please fix any build or test issues in this Swift package.", "--exclude-tools", "FixSwift")
            .paramsDescription("Parameters for promptly command to fix Swift issues")

    }
}
