// Generated by GenerateDefaultShellCommandConfig
// Run: `swift run GenerateDefaultShellCommandConfig`

import Foundation

public enum DefaultShellCommandConfig {
    public static let config: ShellCommandConfig = shellCommands {
        command("ListFiles")
            .describing("Recursively list a directory")
            .executable("/bin/ls")
            .argRow("{(path)}")
            .require("path", .string(description: "Directory path to list"))
            .paramsDescription("Parameters for ls command")

        command("ShowFileTree")
            .describing("Visual directory tree listing")
            .executable("tree")
            .truncated()
            .argRow("{(path)}")
            .require("path", .string(description: "Directory path to list"))
            .paramsDescription("Parameters for tree command")

        command("FindFiles")
            .describing("Locate files matching a pattern using fd")
            .executable("fd")
            .argRow("{{pattern}}", "{(path)}")
            .require("pattern", .string(description: "Search pattern (regex-like)"))
            .require("path", .string(description: "Root path to search in"))
            .paramsDescription("Parameters for fd command")

        command("RipGrepIncludHidden")
            .describing("Search file contents for a regex pattern including in hidden folders.  Use this only as required since it is slower than RipGrep that ignores hidden files.")
            .executable("rg")
            .optedIn()
            .argRow("--hidden", "--glob", "!.git", "-R", "-n", "{{pattern}}", "{(path)}")
            .require("pattern", .string(description: "Pattern to search for"))
            .require("path", .string(description: "Root path to search in"))
            .paramsDescription("Parameters for grep command")

        command("RipGrep")
            .describing("Search file contents for a regex pattern")
            .executable("rg")
            .argRow("-n", "{{pattern}}", "{(path)}")
            .require("path", .string(description: "Path to search in"))
            .require("pattern", .string(description: "Regex pattern to search for"))
            .paramsDescription("Parameters for ripgrep command")

        command("RipGrepWithGlob")
            .describing("Search file contents for a regex pattern only in files matching given glob, using ripgrep.")
            .executable("rg")
            .argRow("-n", "{{pattern}}", "--glob", "{{glob}}", "{(path)}")
            .require("pattern", .string(description: "Regex pattern to search for"))
            .require("glob", .string(description: "Glob pattern for file filtering (ripgrep --glob argument, including any ! if excluding). User specifies complete glob pattern."))
            .require("path", .string(description: "Path to search in"))
            .paramsDescription("Parameters for ripgrep command with --glob support. glob should be formatted for ripgrep, with ! as needed.")

        command("SearchAndReplace")
            .describing("Perform stream editing on a file")
            .executable("sed")
            .argRow("-i", "")
            .argRow("s/{{search}}/{{replace}}/g")
            .argRow("{(file)}")
            .require("file", .string(description: "File to edit in place"))
            .require("search", .string(description: "Search regex"))
            .require("replace", .string(description: "Replacement string"))
            .paramsDescription("Parameters for sed command")

        command("TouchFile")
            .describing("Create an empty file or update its timestamp")
            .executable("touch")
            .argRow("{(file)}")
            .require("file", .string(description: "Path of the file to create or update"))
            .paramsDescription("Parameters for touch command")

        command("MakeDirectory")
            .describing("Create directories")
            .executable("mkdir")
            .argRow("-p", "{(dir)}")
            .require("dir", .string(description: "Directory path to create"))
            .paramsDescription("Parameters for mkdir command")

        command("RemoveFiles")
            .describing("Remove files or directories")
            .executable("rm")
            .argRow("-f", "-r", "{(target)}")
            .require("target", .string(description: "File or directory to remove"))
            .paramsDescription("Parameters for rm command")

        command("MoveFiles")
            .describing("Move or rename files or directories")
            .executable("mv")
            .argRow("{(source)}", "{(destination)}")
            .require("source", .string(description: "Source path"))
            .require("destination", .string(description: "Destination path"))
            .paramsDescription("Parameters for mv command")

        command("CopyFiles")
            .describing("Copy files or directories")
            .executable("cp")
            .argRow("-r", "-p", "{(source)}", "{(destination)}")
            .require("source", .string(description: "Source path"))
            .require("destination", .string(description: "Destination path"))
            .paramsDescription("Parameters for cp command")

        command("WriteToFile")
            .describing("Create or overwrite a file with specified content via heredoc")
            .executable("bash")
            .argRow("-c", "cat << 'EOF' > {(file)}\n{{content}}\nEOF")
            .require("file", .string(description: "File path to write content to"))
            .require("content", .string(description: "Content to write to the file"))
            .paramsDescription("Parameters for here_document command")

        command("ShowFileContents")
            .describing("Display file contents from a specified starting line, limited by line count")
            .executable("awk")
            .exclusiveArgs()
            .argRow("-v", "start={{startLine}}", "-v", "count={{lineCount}}", "NR>start && NR<=start+count {print}", "{(file)}")
            .argRow("-v", "start={{startLine}}", "NR>start {print}", "{(file)}")
            .argRow("-v", "count={{lineCount}}", "NR<=count {print}", "{(file)}")
            .argRow("1", "{(file)}")
            .require("file", .string(description: "File path to read"))
            .optional("startLine", .integer(description: "Line number to start reading from (0-based)"))
            .optional("lineCount", .integer(description: "Maximum number of lines to read"))
            .paramsDescription("Parameters for awk command, optionally limited by start line and line count")

        command("LineCount")
            .describing("Check the total number of lines in a file")
            .executable("wc")
            .argRow("-l", "{(file)}")
            .require("file", .string(description: "File path to check line count for"))
            .paramsDescription("Parameters for wc command")

        command("SwiftLintLintFile")
            .describing("Run SwiftLint on a specific file")
            .executable("swiftlint")
            .argRow("lint", "--path", "{(file)}")
            .require("file", .string(description: "Swift file path to lint"))
            .paramsDescription("Parameters for swiftlint lint command limited to a single file")

        command("SwiftLintAutocorrectFile")
            .describing("Automatically correct lint issues in a specific file using SwiftLint")
            .executable("swiftlint")
            .optedIn()
            .argRow("autocorrect", "--path", "{(file)}")
            .require("file", .string(description: "Swift file path to autocorrect"))
            .paramsDescription("Parameters for swiftlint autocorrect command limited to a single file")

        command("SwiftFormatFile")
            .describing("Format a Swift source file in place using swift-format")
            .executable("swift-format")
            .optedIn()
            .argRow("format", "--in-place", "{(file)}")
            .require("file", .string(description: "Swift file path to format"))
            .paramsDescription("Parameters for swift-format format command for a single file")

        command("BuildSwift")
            .describing("Build a Swift project using swift build with optional configuration and target filtering")
            .executable("swift")
            .echoed()
            .truncated()
            .argRow("build", "--package-path", "{(packagePath)}")
            .require("packagePath", .string(description: "Path to the Swift package"))
            .argRow("--configuration", "{{configuration}}")
            .argRow("--target", "{{target}}")
            .optional("configuration", .string(description: "Build configuration (debug or release)"))
            .optional("target", .string(description: "Specific build target name"))
            .paramsDescription("Parameters for swift build command with optional configuration and target")

        command("TestSwift")
            .describing("Run tests in a Swift package using swift test, optionally filtering to a specific case or method")
            .executable("swift")
            .echoed()
            .truncated()
            .argRow("test", "--package-path", "{(packagePath)}")
            .require("packagePath", .string(description: "Path to the Swift package"))
            .argRow("--filter", "{{filter}}")
            .optional("filter", .string(description: "Test case or method name to match (swift test --filter syntax)"))
            .paramsDescription("Parameters for swift test command with optional --filter support")

        command("FixSwift")
            .describing("Attempt to fix any build or test issues in a Swift package, optionally with extra instructions")
            .executable("promptly")
            .echoed()
            .truncated()
            .optedIn()
            .argRow("--canned", "build-swift", "--message", "user:Please fix any build or test issues in this Swift package.", "--exclude-tools", "FixSwift")
            .argRow("--message", "user:{{instructions}}")
            .optional("instructions", .string(description: "Additional user instructions to append as a follow-up message"))
            .paramsDescription("Parameters for fixing Swift package issues, optionally appending another user message")

        command("GitStatus")
            .describing("Show working tree status using git status --short")
            .executable("git")
            .argRow("-C", "{(repoPath)}", "status", "--short")
            .require("repoPath", .string(description: "Repository path to inspect"))
            .paramsDescription("Parameters for git status command in short format")

        command("GitDiff")
            .describing("Show staged and unstaged changes using git diff")
            .executable("git")
            .argRow("-C", "{(repoPath)}", "diff")
            .require("repoPath", .string(description: "Repository path to inspect"))
            .optional("pathspec", .string(description: "Optional pathspec to limit diff output"))
            .argRow("--", "{{pathspec}}")
            .paramsDescription("Parameters for git diff command, optionally limited to a pathspec")

        command("GitDiffStaged")
            .describing("Show staged changes using git diff --cached")
            .executable("git")
            .optedIn()
            .argRow("-C", "{(repoPath)}", "diff", "--cached")
            .require("repoPath", .string(description: "Repository path to inspect"))
            .optional("pathspec", .string(description: "Optional pathspec to limit diff output"))
            .argRow("--", "{{pathspec}}")
            .paramsDescription("Parameters for git diff --cached command, optionally limited to a pathspec")

        command("GitDiffRange")
            .describing("Compare two revisions using git diff <base> <compare>")
            .executable("git")
            .optedIn()
            .argRow("-C", "{(repoPath)}", "diff", "{{baseRevision}}", "{{compareRevision}}")
            .require("repoPath", .string(description: "Repository path to inspect"))
            .require("baseRevision", .string(description: "Base revision (commit, branch, or tag)"))
            .require("compareRevision", .string(description: "Comparison revision (commit, branch, or tag)"))
            .optional("pathspec", .string(description: "Optional pathspec to limit diff output"))
            .argRow("--", "{{pathspec}}")
            .paramsDescription("Parameters for git diff between two revisions, optionally limited to a pathspec")

        command("GitAdd")
            .describing("Stage files using git add")
            .executable("git")
            .optedIn()
            .argRow("-C", "{(repoPath)}", "add", "--", "{{pathspec}}")
            .require("repoPath", .string(description: "Repository path"))
            .require("pathspec", .string(description: "Pathspec for files to stage"))
            .paramsDescription("Parameters for git add command")

        command("GitBranch")
            .describing("List branches or create a new branch within a repository")
            .executable("git")
            .optedIn()
            .argRow("-C", "{(repoPath)}", "branch")
            .require("repoPath", .string(description: "Repository path"))
            .optional("branch", .string(description: "Branch name to create"))
            .argRow("{{branch}}")
            .paramsDescription("Parameters for git branch command; provide branch name to create it")

        command("GitCommit")
            .describing("Create a commit with the provided message in a repository")
            .executable("git")
            .optedIn()
            .argRow("-C", "{(repoPath)}", "commit", "-m", "{{message}}")
            .require("repoPath", .string(description: "Repository path"))
            .require("message", .string(description: "Commit message"))
            .paramsDescription("Parameters for git commit command with a required message")

        command("GitShow")
            .describing("Show commit details using git show")
            .executable("git")
            .argRow("-C", "{(repoPath)}", "show")
            .argRow("{{revision}}")
            .require("repoPath", .string(description: "Repository path"))
            .optional("revision", .string(description: "Revision to display (defaults to HEAD)"))
            .optional("pathspec", .string(description: "Optional pathspec to scope the output"))
            .argRow("--", "{{pathspec}}")
            .paramsDescription("Parameters for git show command with optional revision and path filtering")

        command("GitLog")
            .describing("Show commit history using git log --oneline")
            .executable("git")
            .optedIn()
            .argRow("-C", "{(repoPath)}", "log", "--oneline")
            .require("repoPath", .string(description: "Repository path"))
            .optional("maxCount", .integer(description: "Limit number of commits shown"))
            .argRow("--max-count", "{{maxCount}}")
            .optional("pathspec", .string(description: "Optional pathspec to scope the log"))
            .argRow("--", "{{pathspec}}")
            .paramsDescription("Parameters for git log command with optional limits and path filtering")

        command("GitTag")
            .describing("List or create tags using git tag")
            .executable("git")
            .optedIn()
            .exclusiveArgs()
            .argRow("-C", "{(repoPath)}", "tag", "-a", "{{name}}", "-m", "{{message}}")
            .argRow("-C", "{(repoPath)}", "tag", "{{name}}")
            .argRow("-C", "{(repoPath)}", "tag")
            .require("repoPath", .string(description: "Repository path"))
            .optional("name", .string(description: "Tag name to list or create"))
            .optional("message", .string(description: "Message for annotated tag (requires tag name)"))
            .paramsDescription("Parameters for git tag command; provide name (and optional message) to create a tag")

        command("GhPrStatus")
            .describing("Show pull request status for the current or specified repository using GitHub CLI")
            .executable("gh")
            .optedIn()
            .argRow("pr", "status")
            .optional("repo", .string(description: "Owner/repo identifier to override detected repository"))
            .argRow("--repo", "{{repo}}")
            .paramsDescription("Parameters for gh pr status command with optional repository override")

        command("GhPrView")
            .describing("View pull request details using GitHub CLI")
            .executable("gh")
            .optedIn()
            .argRow("pr", "view", "{{pullRequest}}")
            .require("pullRequest", .string(description: "Pull request number, URL, or branch"))
            .optional("repo", .string(description: "Owner/repo identifier to override detected repository"))
            .argRow("--repo", "{{repo}}")
            .optional("jsonFields", .string(description: "Comma-separated list of fields for JSON output"))
            .argRow("--json", "{{jsonFields}}")
            .optional("webFlag", .string(description: "Pass literal --web to open the PR in a browser"))
            .argRow("{{webFlag}}")
            .paramsDescription("Parameters for gh pr view command with optional repository override and output mode")

        command("GhPrCreate")
            .describing("Create a pull request using GitHub CLI")
            .executable("gh")
            .optedIn()
            .argRow("pr", "create", "--title", "{{title}}", "--body", "{{body}}")
            .require("title", .string(description: "Pull request title"))
            .require("body", .string(description: "Pull request body/description"))
            .optional("base", .string(description: "Base branch for the pull request"))
            .argRow("--base", "{{base}}")
            .optional("head", .string(description: "Head branch for the pull request"))
            .argRow("--head", "{{head}}")
            .optional("repo", .string(description: "Owner/repo identifier to override detected repository"))
            .argRow("--repo", "{{repo}}")
            .optional("draftFlag", .string(description: "Optional literal flags such as --draft"))
            .argRow("{{draftFlag}}")
            .paramsDescription("Parameters for gh pr create command with optional base/head, repository override, and extra flag")

        command("RegisterShellTool")
            .describing("Register a new shell command tool configuration entry")
            .executable("promptly")
            .optedIn()
            .argRow("tool", "add", "--id", "{{toolId}}", "--name", "{{toolName}}", "--command", "{{executable}}")
            .optional("configFile", .string(description: "Optional tools config file path"))
            .argRow("--config-file", "{(configFile)}")
            .optional("argumentTemplate", .string(description: "Comma-separated tokens for a single argument template group"))
            .argRow("--argument-template", "{{argumentTemplate}}")
            .optional("parametersFile", .string(description: "Path to JSON schema file describing tool parameters"))
            .argRow("--parameters-file", "{(parametersFile)}")
            .optional("parameters", .string(description: "JSON schema string describing tool parameters"))
            .argRow("--parameters", "{{parameters}}")
            .paramsDescription("Parameters for adding a new shell command tool via the tool add subcommand")

    }
}
