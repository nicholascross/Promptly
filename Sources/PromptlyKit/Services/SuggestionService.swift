import Foundation

/// A service that suggests regular expression patterns by querying a language model.
public struct SuggestionService {
    private let factory: ChatRequestFactory

    /// Initialize with a Promptly config to create the chat request factory.
    public init(config: Config) {
        factory = config.makeChatFactory()
    }

    /// Suggest up to five regex patterns to match important content in logs.
    ///
    /// - Parameters:
    ///   - head: Leading lines sample.
    ///   - tail: Trailing lines sample.
    ///   - truncatedSample: Random lines from the omitted middle section.
    ///   - toolName: Name of the wrapped tool that generated the log.
    ///   - toolDescription: Description of the wrapped tool.
    ///   - arguments: JSON arguments passed to the tool.
    public func suggestPatterns(
        head: [String],
        tail: [String],
        truncatedSample: [String],
        toolName: String,
        toolDescription: String,
        arguments: JSONValue
    ) async throws -> [String] {
        let systemPrompt = buildSystemPrompt()
        let userPrompt = try buildUserPrompt(
            head: head,
            tail: tail,
            truncated: truncatedSample,
            toolName: toolName,
            toolDescription: toolDescription,
            arguments: arguments
        )

        let messages = [
            ChatMessage(role: .system, content: .text(systemPrompt)),
            ChatMessage(role: .user, content: .text(userPrompt))
        ]

        let suggestion = try await fetchSuggestion(messages: messages)
        return extractPatterns(from: suggestion)
    }

    private func buildSystemPrompt() -> String {
        """
        You are a tool that suggests up to five regular expressions in JSON array format to match important content in logs.

        Provide patterns based on the sample lines of the log.
        These will be used to extract relevant information from the truncated section.

        Example output:
        ```json
        [
            "ERROR.*",
            "WARNING.*"
        ]
        ```
        """
    }

    private func buildUserPrompt(
        head: [String],
        tail: [String],
        truncated: [String],
        toolName: String,
        toolDescription: String,
        arguments: JSONValue
    ) throws -> String {
        let headSample = head.joined(separator: "\n")
        let tailSample = tail.joined(separator: "\n")
        let truncatedSample = truncated.joined(separator: "\n")
        return """
        Leading samples:
        \(headSample)
        Trailing samples:
        \(tailSample)
        Truncated samples:
        \(truncatedSample)

        The log was generated by running command:
        name: \(toolName)
        description: \(toolDescription)

        The command was made with the following arguments:
        \(arguments)

        Please suggest up to five regular expressions in JSON array format that can be used to match important content in these logs.
        """
    }

    private func fetchSuggestion(
        messages: [ChatMessage]
    ) async throws -> String {
        let request = try factory.makeRequest(messages: messages)
        let (stream, response) = try await URLSession.shared.bytes(for: request)

        guard let http = response as? HTTPURLResponse, 200 ... 299 ~= http.statusCode else {
            return ""
        }

        return try await ResponseProcessor().processAllContent(from: stream)
    }

    private func extractPatterns(from suggestion: String) -> [String] {
        guard
            let data = suggestion.data(using: .utf8),
            let patterns = try? JSONDecoder().decode([String].self, from: data)
        else {
            return []
        }

        return patterns
    }
}

private extension Config {
    func makeChatFactory() -> ChatRequestFactory {
        return ChatRequestFactory(
            chatCompletionURL: chatCompletionsURL,
            model: model,
            token: token,
            organizationId: organizationId,
            tools: [],
            encoder: JSONEncoder()
        )
    }
}
